// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  role UserRole @default(USER)

  Comment Comment[]
  posts   Post[]

  accounts Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  content     String
  authorName  String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  likes    Int?      @default(0)
  views    Int?      @default(0)
  likedBy  String[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
